{"Abs":{"Description":"Gives the absolute value of the specified value","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"Abs"},"AsPositive":{"Description":"This function converts numeric expression to positive value.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"AsPositive"},"CanDivide":{"Description":"This function is used to check whether the Numeric value passed as a first parameter is divisible by numeric Value passed as second parameter. If it is divisible then the function returns a Logical value 'Yes' otherwise returns 'No'.","Parameters":[{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"2","Total Mandatory Parameters":"2","Category":"Maths","Execution Mode":"Client","Return Type":"Logical"},"Name":"CanDivide"},"ForexAsPositive":{"Description":"This function converts numeric expression to forex positive value.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"ForexAsPositive"},"HexToDec":{"Description":"Gives the decimal value for the hexadecimal value passed.","Parameters":[{"Parameter Type":"Value","Datatype":"String","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client","Return Type":"Number"},"Name":"HexToDec"},"IsEven":{"Description":"This function checks whether the numeric value passed as a parameter is Even number or not. If the given input is an Even value the function will return 'Yes' otherwise it will return 'No'.","Parameters":[{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client","Return Type":"Logical"},"Name":"IsEven"},"IsForexNegative":{"Description":"To check if the Forex value supplied as parameter is Negative. If the value is negative the function will return 'Yes' otherwise 'No'.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client","Return Type":"Logical"},"Name":"IsForexNegative"},"IsNegative":{"Description":"To check if the value supplied as parameter is Negative. If the value is negative the function will return 'Yes' otherwise 'No'.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client","Return Type":"Logical"},"Name":"IsNegative"},"IsOdd":{"Description":"This function checks whether the numeric value passed as a parameter is Odd number or not. If the given input is an odd value the function will return 'Yes' otherwise it will return 'No'.","Parameters":[{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client","Return Type":"Logical"},"Name":"IsOdd"},"Max":{"Description":"Gives the Maximum value when two or more values are compared. In the case of string comparison it compares the first characters of both the argument strings and returns the value which is higher of the two in the alphabet. Please note only the first character is considered for comparison.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"2","Total Mandatory Parameters":"2","Category":"Maths","Execution Mode":"Client"},"Name":"Max"},"Min":{"Description":"Gives the Minimum value when two or more values are compared. In the case of  string $$Min will compare the first character of the two arguments and return the value which is lower in the alphabet.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"2","Total Mandatory Parameters":"2","Category":"Maths","Execution Mode":"Client"},"Name":"Min"},"MulDiv":{"Description":"Multiplies and\\or divides number.","Parameters":[{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"3","Total Mandatory Parameters":"3","Category":"Maths","Execution Mode":"Client","Return Type":"Number"},"Name":"MulDiv"},"MulDivAmt":{"Description":"Multiplies and\\or divides number.","Parameters":[{"Parameter Type":"Value","Datatype":"Amount","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Amount","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Amount","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"3","Total Mandatory Parameters":"3","Category":"Maths","Execution Mode":"Client","Return Type":"Amount"},"Name":"MulDivAmt"},"Negative":{"Description":"Gives the negative  value of the specified value.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"Negative"},"Number":{"Description":"This extracts number value of the given parameter. It takes an expression and returns a numeric value. The value contains only four digits after decimal.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client","Return Type":"Number"},"Name":"Number"},"NumValue":{"Description":"Gives the numerical value for the parameter passed.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client","Return Type":"Number"},"Name":"NumValue"},"PrevTotal":{"Description":"The Previous total is also for a specific field and appears at the line level as a running total but does not include the field value of the current line i.e., this function returns blank at 1st line, value of 1st line at 2nd line, value of 1st+2nd line at 3rd line and so on.","Parameters":[{"Parameter Type":"Identifier","Is Mandatory":"Yes","Refers To":"Field ","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"PrevTotal"},"RandomNumber":{"Description":"Generates a random number between a given min max range.","Parameters":[{"Parameter Type":"Value","Datatype":"Long","Is Mandatory":"No","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Long","Is Mandatory":"No","Variable Argument":"No"}],"Meta":{"Total Parameters":"2","Total Mandatory Parameters":"0","Category":"Maths","Execution Mode":"Client","Return Type":"Long"},"Name":"RandomNumber"},"Round":{"Description":"$$Round is used to round off the given value.In the above syntax the function uses 2 parameters. The first parameter NumberToRound  will be the actual value, which has to be rounded. The second - RoundLimit is for giving the Rounding Limit, which would be a numeric expression. The function, '$$Round' is one of the few functions that does not have a defined return type. The type of the value returned is based on the type of the argument passed. For example, if a type, 'Number' is sent, then, the type returned will also be a number.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"No","Variable Argument":"No"}],"Meta":{"Total Parameters":"2","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"Round"},"RoundDown":{"Description":"$$RoundDown is used to round off the value downwards .  In the above syntax the function uses 2 parameters. The first parameter NumberToRound  will be the actual value, which has to be rounded off. The second - RoundLimit is for specifing the rounding limit.  This function always Rounds the given value downwards, i.e., lesser than the give value.  This function  is one of the few functions that does not have a defined return type. The type of the value returned is based on the type of the argument passed. For example, if a type, 'Number' is sent, then, the type returned will also be a number.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"No","Variable Argument":"No"}],"Meta":{"Total Parameters":"2","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"RoundDown"},"RoundUp":{"Description":"To specify that the amount is to be rounded off by a specified value upwards.$$RoundUp is used to Round Off the value on the higher side.  In the above syntax the function uses 2 parameters. The first parameter ValueToRound  will be the actual value, which has to be Rounded.The second - RoundLimit is for specifing the Rounding Limit.This function always rounds off the value upwards, i.e., more than the given value This function  is one of the few functions that does not have a defined return type.The type of the value returned is based on the type of the argument passed. For example, if a type, 'Number' is sent, then, the type returned will also be a number.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"Yes","Variable Argument":"No"},{"Parameter Type":"Value","Datatype":"Number","Is Mandatory":"No","Variable Argument":"No"}],"Meta":{"Total Parameters":"2","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"RoundUp"},"ScaleValue":{"Description":"Currently selected scale factor. This function returns the value of the currently selected scale factor.","Parameters":[{"Parameter Type":"Value","Is Mandatory":"No","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"0","Category":"Maths","Execution Mode":"Client","Return Type":"Number"},"Name":"ScaleValue"},"SubTotal":{"Description":"The Sub Total function is exactly like the Total function except that it is a running total for that column and appears on individual Lines and not on the total lines, hence the individual lines will need to use a defined Subtotal field. The Expression Field should be Amount/Number Type. i.e. input should be numerical field. Return type will be Amount.","Parameters":[{"Parameter Type":"Identifier","Is Mandatory":"Yes","Refers To":"Field ","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"SubTotal"},"Total":{"Description":"This function is used to total all the values in a specific column for a particular field. The column of the Field being totaled could be a Quantity or Amount or a Number. The Fields being totaled need to be specified in the Part Definition with attribute 'Total' apart from the actual definition of the field. The Expression/Field values should be Amount/Number/Quantity type.","Parameters":[{"Parameter Type":"Identifier","Is Mandatory":"Yes","Refers To":"Field ","Variable Argument":"No"}],"Meta":{"Total Parameters":"1","Total Mandatory Parameters":"1","Category":"Maths","Execution Mode":"Client"},"Name":"Total"}}
